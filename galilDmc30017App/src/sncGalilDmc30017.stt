program sncGalilDmc30017

%%//----------------------------------------
%%// 	      Variables
%%//----------------------------------------

string HOMING_READY = "Ready for command";
string HOMING_STARTED = "Homing started";
string HOMING_FAILED_MOVE = "Could not start moving";
string HOMING_COMPLETE = "Homing complete";
string HOMING_NOT_COMPLETED = "Motor stopped before homing was complete";

%%//----------------------------------------
%%// 	      Monitored PVs
%%//----------------------------------------

int home_limsw_cmd;
assign home_limsw_cmd to "{P}HomeToLimSw-Cmd.VAL";
monitor home_limsw_cmd;
evflag home_limsw_cmd_Flag;
sync home_limsw_cmd home_limsw_cmd_Flag;

int low_limit_switch;
assign low_limit_switch to "{P}{M}.LLS";
monitor low_limit_switch;

int done_moving;
assign done_moving to "{P}{M}.DMOV";
monitor done_moving;

int position;
assign position to "{P}{M}.VAL";

int cmd_mode;
assign cmd_mode to "{P}{M}.SET";

int rst_pos_enbl;
assign rst_pos_enbl to "{P}RstPosAfterHome-Sts";
monitor rst_pos_enbl;

int rst_pos_cmd;
assign rst_pos_cmd to "{P}RstPos-Cmd";

string homing_state;
assign homing_state to "{P}HomingState-Mon";

%%//----------------------------------------
%%// 	    State Notation Language
%%//----------------------------------------

ss homing {

    state default_values {

        entry {

            %{/* Reset homing state */}%

            strcpy(homing_state, HOMING_READY);
            pvPut(homing_state, SYNC);
        }

        when () {

            %{/* Go to state init */}%

        } state init
    }

    state init {

	when ( efTestAndClear(home_limsw_cmd_Flag) && home_limsw_cmd == 1){

		%{/* Go to the homing started state */}%

	} state started
    }

    state started {
	
	when (done_moving == 0){

            %{/* Motor started moving */}%

            %%// update homing state
            strcpy(homing_state, HOMING_STARTED);
            pvPut(homing_state, SYNC);

	} state wait

	when (delay(1)){

		%{/* Could not move for some reason */}%

            %%// update homing state
            strcpy(homing_state, HOMING_FAILED_MOVE);
            pvPut(homing_state, SYNC);

	} state init

    }

    state wait {

        when (done_moving != 0) {

            %{/* The motor has stopped moving */}%

        } state stopped

    }

    state stopped {

        when (rst_pos_enbl == 0 && low_limit_switch != 0) {

            %{/* Position reset in homing is disabled, nothing to be done */}%

            %%// update homing state
            strcpy(homing_state, HOMING_COMPLETE);
            pvPut(homing_state, SYNC);

        } state init

	when (delay(1) && low_limit_switch == 0) {

            %{/* Stopped moving without completing homing procedure */}%

            %%// DEBUGGING
            printf("[GALIL STATE MACHINE]: Motor stopped moving without completing homing.\n");

            %%// update homing state
            strcpy(homing_state, HOMING_NOT_COMPLETED);
            pvPut(homing_state, SYNC);

	} state init

	when (rst_pos_enbl != 0 && low_limit_switch != 0) {

            %{/* The low limit switch has been hit.
                 Set the motor position to the home reference value,
                 without moving the motor. */}%

            %%// Reset position
            rst_pos_cmd = 1;
            pvPut(rst_pos_cmd, SYNC);

            %%// update homing state
            strcpy(homing_state, HOMING_COMPLETE);
            pvPut(homing_state, SYNC);

	} state init

    }

}

